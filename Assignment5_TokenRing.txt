Assignment 5 Token Ring

File name: TokenRing.java

Code:
import java.util.Scanner;

public class TokenRing {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        while (true) {
            System.out.println("Enter Number of Nodes");
            int n = scanner.nextInt();
            int token = 0;
            
            while (true) {
                for (int i = 0; i < n; i++)
                    System.out.print(i + " ");
                System.out.println("0");
                
                System.out.println("Enter Sender");
                int s = scanner.nextInt();
                
                System.out.println("Enter Receiver");
                int r = scanner.nextInt();
                
                System.out.println("Enter Data");
                int d = scanner.nextInt();

                // Passing token until sender is found
                for (int i = token; (i % n) != s; i = (i + 1) % n) {
                    System.out.print(i + "->");
                }
                System.out.println(s);

                // Sending data in mutual exclusion
                for (int i = (s) % n; i != r; i = (i + 1) % n) {
                    System.out.println("Sender " + (i % n) + " sent data " + d + " to " + (i + 1) % n);
                }

                // Releasing token
                token = s;
                System.out.println("Token at " + token);
                
                System.out.println("Enter 1 to continue, 0 to stop:");
                int choice = scanner.nextInt();
                
                if (choice == 0)
                    break;
            }
            System.out.println("Do you want to start again? Enter 1 to continue, 0 to stop:");
            int restart = scanner.nextInt();
            if (restart == 0)
                break;
        }
    }
}



ouput:

Microsoft Windows [Version 10.0.19045.4170]
(c) Microsoft Corporation. All rights reserved.

C:\Users\HP>cd Desktop

C:\Users\HP\Desktop>cd DS_main

C:\Users\HP\Desktop\DS_main>cd Practice

C:\Users\HP\Desktop\DS_main\Practice>cd Assi5

C:\Users\HP\Desktop\DS_main\Practice\Assi5>java TokenRing.java
Enter Number of Nodes
5
0 1 2 3 4 0
Enter Sender
2
Enter Receiver
4
Enter Data
500
0->1->2
Sender 2 sent data 500 to 3
Sender 3 sent data 500 to 4
Token at 2
Enter 1 to continue, 0 to stop:
1
0 1 2 3 4 0
Enter Sender
4
Enter Receiver
3
Enter Data
600
2->3->4
Sender 4 sent data 600 to 0
Sender 0 sent data 600 to 1
Sender 1 sent data 600 to 2
Sender 2 sent data 600 to 3
Token at 4
Enter 1 to continue, 0 to stop:
0
Do you want to start again? Enter 1 to continue, 0 to stop:
0

C:\Users\HP\Desktop\DS_main\Practice\Assi5>




cpp code:

Filename: Tring.cpp ( to be run in online compiler)



#include <iostream>
using namespace std;

int main() {
    int token = 0;
    cout << "Enter Number of Nodes" << endl;
    int n, s, r, d;
    cin >> n;
    
    while (true) {
        for (int i = 0; i < n; i++)
            cout << i << " ";
        cout << 0 << endl;
        cout << "Enter Sender" << endl;
        cin >> s;
        cout << "Enter receiver" << endl;
        cin >> r;
        cout << "Enter Data" << endl;
        cin >> d;

        // Passing token until sender is found
        for (int i = token; (i % n) != s; i = (i + 1) % n) {
            cout << i << "->";
        }
        cout << s << endl;

        // Sending data in mutual exclusion
        for (int i = (s) % n; i != r; i = (i + 1) % n) {
            cout << "Sender " << (i % n) << " sent data " << d << " to " << (i + 1) % n << endl;
        }

        // Releasing token
        token = s;
        cout << "Token at " << token << endl;
        
        cout << "Enter 1 to continue, 0 to stop:" << endl;
        int choice;
        cin >> choice;

        if (choice == 0)
            break;
    }
    return 0;
}



Output:
/tmp/va0k3ykG77.o
Enter the no. of nodes: 5
0 1 2 3 4 0
Enter the sender: 2
Enter the receiver: 4
Enter the data: 500
0->1->2
Sender 2 send data 500 to 3
Sender 3 send data 500 to 4
Token at 2
Enter 0 to stop and 1 to continue: 1
0 1 2 3 4 0
Enter the sender: 4
Enter the receiver: 3
Enter the data: 600
2->3->4
Sender 4 send data 600 to 0
Sender 0 send data 600 to 1
Sender 1 send data 600 to 2
Sender 2 send data 600 to 3
Token at 4
Enter 0 to stop and 1 to continue: 0


=== Code Execution Successful ===

